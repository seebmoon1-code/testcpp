متوجه شدم. حق با شماست، قرار دادن متن آموزشی در یک بلوک کد تکی و حجیم (حتی اگر Markdown باشد) می‌تواند خواننده را بترساند و خوانایی را کاهش دهد.

برای افزایش خوانایی و حرفه‌ای‌تر شدن مستندات در گیت‌هاب (فایل `helper.txt` شما)، متن را به صورت یکپارچه و در قالب **پروزه Markdown استاندارد**، با استفاده از سربرگ‌ها و لیست‌ها، اما بدون استفاده از بلوک کد بزرگ، برایتان آماده می‌کنم.

این نسخه **حداکثر خوانایی** را در گیت‌هاب تضمین می‌کند:

-----

````markdown
# 🚀 راهنمای جامع وب سرور C++ (Single-File Multi-threaded)

این پروژه یک وب سرور سبک و چندنخی (Multi-threaded) است که با C++17 نوشته شده و از سوکت‌های یونیکس (`<sys/socket.h>`) و کتابخانه **SQLite3** برای Persistence داده‌ها استفاده می‌کند.

## ۱. پیش‌نیازها و کامپایل

برای کامپایل و اجرای کد، نیاز به کامپایلر G++ (با پشتیبانی از C++17) و کتابخانه توسعه SQLite3 دارید.

### ۱.۱. نصب پیش‌نیازها (برای Debian/Ubuntu)

```bash
sudo apt update
sudo apt install build-essential libsqlite3-dev git
````

### ۱.۲. گام‌های کامپایل

۱.  **کپی کردن پروژه:**
` bash git clone [https://github.com/seebmoon1-code/testcpp.git](https://github.com/seebmoon1-code/testcpp.git) cd testcpp/one/  `

۲.  **دستور کامپایل نهایی:**
برای لینک کردن کتابخانه‌های **SQLite3** (`-lsqlite3`) و **نخ‌ها** (`-lpthread`)، از دستور زیر استفاده کنید:
` bash g++ -o webserver webserver16.cpp -lsqlite3 -lpthread -std=c++17  `

### ۱.۳. اجرای سرور

فایل اجرایی `webserver` را اجرا کنید. سرور روی پورت **۸۰۸۰** شروع به کار می‌کند و به طور خودکار ساختار فایل‌ها و دیتابیس را ایجاد می‌کند.

```bash
./webserver
```

-----

## ۲. ساختار و قابلیت‌های کلیدی

| ماژول/کلاس | کاربرد اصلی | نکات مهم |
| :--- | :--- | :--- |
| **DatabaseManager** | مدیریت اتصال و اجرای کوئری‌ها در SQLite. | **امنیت بالا:** از **Prepared Statements** برای عملیات‌های C/U/D استفاده می‌کند. |
| **Router** | نگاشت متدهای HTTP (`GET`, `POST`, `PUT`, `DELETE`) به توابع هندلر. | از مسیریابی Wildcard (مانند `/api/users/USER_ID`) پشتیبانی می‌کند. |
| **I/O Streaming** | مدیریت فایل‌های حجیم و آپلود. | استفاده از **Streaming** برای جلوگیری از پر شدن حافظه (RAM) سرور. |

-----

## ۳. نقاط دسترسی (Endpoints)

سرور به دو بخش اصلی تقسیم می‌شود: **سرویس‌دهی فایل** و **API داده‌ها (CRUD)**.

### ۳.۱. مدیریت فایل و Utility

| مسیر (URL) | متد HTTP | توضیحات |
| :--- | :--- | :--- |
| `http://localhost:8080/` | `GET` | نمایش صفحه اصلی (`www/index.html`). |
| `http://localhost:8080/files` | `GET` | نمایش صفحه **File Manager** با ابزارهای آپلود و حذف. |
| `http://localhost:8080/upload` | `POST` | آپلود فایل (با استفاده از Streaming). |
| `http://localhost:8080/files/FILE_NAME` | `DELETE` | حذف یک فایل خاص از پوشه‌ی `uploads/`. |
| `http://localhost:8080/count` | `GET` | نمایش شمارنده اتمیک (تست Thread Safety). |

### ۳.۲. API مدیریت کاربران (CRUD)

این API برای مدیریت کاربران در جدول `users` دیتابیس استفاده می‌شود.

#### الف. ایجاد کاربر (POST)

برای ایجاد کاربر جدید، بدنه درخواست باید شامل JSON زیر باشد:

```json
{"name": "Reza", "email": "reza@test.com"}
```

**مثال cURL:**

```bash
curl -X POST -H "Content-Type: application/json" -d '{"name": "Reza", "email": "reza@test.com"}' http://localhost:8080/api/users
```

#### ب. لیست کاربران (GET)

برای دریافت لیست کامل کاربران:

```bash
curl http://localhost:8080/api/users
```

#### پ. به‌روزرسانی کاربر (PUT)

برای به‌روزرسانی کاربر بر اساس ID، ID را در انتهای مسیر قرار دهید (مثال: ID=1).

```json
{"name": "New Name"}
```

**مثال cURL (به‌روزرسانی نام کاربر با ID=1):**

```bash
curl -X PUT -H "Content-Type: application/json" -d '{"name": "Updated Name"}' http://localhost:8080/api/users/1
```

```
```
